(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{404:function(t,s,e){"use strict";e.r(s);var a=e(54),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"container-and-cgroups"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#container-and-cgroups"}},[t._v("#")]),t._v(" Container and Cgroups")]),t._v(" "),e("p",[t._v("Cgroups is a Kernel feature that organizes processes into hierarchical groups to limit and monitor their system usage such as CPU, memory, disk, network and so on.")]),t._v(" "),e("p",[t._v("The Linux kernel provides a pseudo-filesystem named cgroupfs as the interface. A cgroup is a set of processes which has settings in cgroupfs. With the settings in cgroupsfs, we can do things below:")]),t._v(" "),e("ul",[e("li",[t._v("Limit the amount of CPU time.")]),t._v(" "),e("li",[t._v("Enable or disable Out of Memory killer.")]),t._v(" "),e("li",[t._v("You name it. ðŸ˜ƒ")])]),t._v(" "),e("p",[t._v("Below is the simplified code from "),e("a",{attrs:{href:"https://github.com/p8952/bocker/blob/master/bocker",target:"_blank",rel:"noopener noreferrer"}},[t._v("bocker"),e("OutboundLink")],1),t._v(". It demonstrates that limiting the system resource usage of a container can be achieved by creating a cgroup and executing a command in a cgroup.")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Prepare a hash. We need it to identify our container.")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("uuid")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ps_'),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("shuf")]),t._v(" -i "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("42002")]),t._v("-42254 -n "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v('"')]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Prepare a root dir for all the containers.")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("btrfs_path")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/var/bocker'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("cgroups")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'cpu,cpuacct,memory'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Prepare root filesystem based on the given `$image`.")]),t._v("\n$ btrfs subvolume snapshot "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$btrfs_path")]),t._v("/"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$image")]),t._v('"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$btrfs_path")]),t._v("/"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$uuid")]),t._v('"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" /dev/null\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Create a cgroup")]),t._v("\n$ cgcreate -g "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$cgroups")]),t._v(":/"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$uuid")]),t._v('"')]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Control cgroup resource")]),t._v("\n$ cgset -r cpu.shares"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("512")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$uuid")]),t._v('"')]),t._v("\n$ cgset -r memory.limit_in_bytes"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("512000000")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$uuid")]),t._v('"')]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Execute a given `$cmd` in the cgroup.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# We need to create a unique namespace for the command (unshare).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# We also need to change the root directory (chroot).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# We also need to mount the runtime (/proc).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Logging is a bonus (tee).")]),t._v("\n$ cgexec -g "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$cgroups")]),t._v(":"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$uuid")]),t._v('"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ip")]),t._v(" netns "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" netns_"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$uuid")]),t._v('"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n        unshare -fmuip --mount-proc "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("chroot")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$btrfs_path")]),t._v("/"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$uuid")]),t._v('"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n        /bin/sh -c "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/bin/mount -t proc proc /proc && '),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$cmd")]),t._v('"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token operator"}},[e("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("2")]),t._v(">")]),e("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("&1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("tee")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$btrfs_path")]),t._v("/"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$uuid")]),t._v("/"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$uuid")]),t._v('.log"')]),t._v("\n")])])]),e("p",[t._v("You don't necessarily need to remember all the commands above, since it's pointless if you aren't a container engine developer.")]),t._v(" "),e("p",[t._v("The container engine such as runC, rkt, lxc provides you a beautifully designed CLI that abstracts above process for you. If you like watching Youtube video, "),e("a",{attrs:{href:"https://www.youtube.com/watch?v=8fi7uSYlOdc",target:"_blank",rel:"noopener noreferrer"}},[t._v("Liz Rice"),e("OutboundLink")],1),t._v(" just implemented the container from scratch in 40 minutes.")]),t._v(" "),e("p",[t._v("Check the manpage of "),e("a",{attrs:{href:"https://man7.org/linux/man-pages/man7/cgroups.7.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("cgroups.7"),e("OutboundLink")],1),t._v(" for the overview and "),e("a",{attrs:{href:"https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/resource_management_guide/ch01",target:"_blank",rel:"noopener noreferrer"}},[t._v("Introduction to Control Groups"),e("OutboundLink")],1),t._v(" for the usage.")])])}),[],!1,null,null,null);s.default=r.exports}}]);