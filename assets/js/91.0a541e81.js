(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{482:function(t,a,e){"use strict";e.r(a);var s=e(54),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"fuzzy-search"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fuzzy-search"}},[t._v("#")]),t._v(" Fuzzy Search")]),t._v(" "),e("p"),e("div",{staticClass:"table-of-contents"},[e("ul",[e("li",[e("a",{attrs:{href:"#overview"}},[t._v("Overview")])]),e("li",[e("a",{attrs:{href:"#solutions"}},[t._v("Solutions")]),e("ul",[e("li",[e("a",{attrs:{href:"#ctrlp-vim"}},[t._v("ctrlp.vim")])]),e("li",[e("a",{attrs:{href:"#fzf"}},[t._v("fzf")])]),e("li",[e("a",{attrs:{href:"#spellcheck"}},[t._v("spellcheck")])])])]),e("li",[e("a",{attrs:{href:"#patterns"}},[t._v("Patterns")]),e("ul",[e("li",[e("a",{attrs:{href:"#approximate-string-matching"}},[t._v("Approximate String Matching")])]),e("li",[e("a",{attrs:{href:"#hamming-distance"}},[t._v("Hamming Distance")])]),e("li",[e("a",{attrs:{href:"#levenshtein-distance"}},[t._v("Levenshtein Distance")])]),e("li",[e("a",{attrs:{href:"#damerau-levenshtein-distance"}},[t._v("Damerau-Levenshtein distance")])]),e("li",[e("a",{attrs:{href:"#difflib"}},[t._v("difflib")])]),e("li",[e("a",{attrs:{href:"#bitap"}},[t._v("Bitap")])]),e("li",[e("a",{attrs:{href:"#bigram-comparing"}},[t._v("Bigram Comparing")])])])]),e("li",[e("a",{attrs:{href:"#conclusions"}},[t._v("Conclusions")])]),e("li",[e("a",{attrs:{href:"#references"}},[t._v("References")])])])]),e("p"),t._v(" "),e("h2",{attrs:{id:"overview"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[t._v("#")]),t._v(" Overview")]),t._v(" "),e("p",[t._v("A fuzzy search is a process that locates or filter items by given an approximate\nsimilar query string. It's done using approximate string matching algorithms.")]),t._v(" "),e("h2",{attrs:{id:"solutions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#solutions"}},[t._v("#")]),t._v(" Solutions")]),t._v(" "),e("h3",{attrs:{id:"ctrlp-vim"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ctrlp-vim"}},[t._v("#")]),t._v(" ctrlp.vim")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/ctrlpvim/ctrlp.vim",target:"_blank",rel:"noopener noreferrer"}},[t._v("ctrlpvim/ctrlp.vim"),e("OutboundLink")],1),t._v(" is a vim plugin that\nsupports full path fuzzy finding.")]),t._v(" "),e("p",[t._v("By typing "),e("code",[t._v("ctrl+p")]),t._v(" in normal mode, you can fuzzy find files by your inputs. For example,\ntyping "),e("code",[t._v("mo")]),t._v(" would possibly match below files:")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("mo")]),t._v("dified.txt")]),t._v(" "),e("li",[t._v("colors/"),e("strong",[t._v("mo")]),t._v("lokai.vim")]),t._v(" "),e("li",[t._v("docs/easy"),e("strong",[t._v("mo")]),t._v("tion.txt")])]),t._v(" "),e("p",[t._v("Such a plugin helps finding specific files faster.")]),t._v(" "),e("h3",{attrs:{id:"fzf"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fzf"}},[t._v("#")]),t._v(" fzf")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/junegunn/fzf",target:"_blank",rel:"noopener noreferrer"}},[t._v("junegunn/fzf"),e("OutboundLink")],1),t._v(" is a general-purpose command-line\nFuzzy finder. It can fuzzily process any list like files, command history, etc.")]),t._v(" "),e("p",[t._v("Such utility help typing commands faster.")]),t._v(" "),e("h3",{attrs:{id:"spellcheck"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spellcheck"}},[t._v("#")]),t._v(" spellcheck")]),t._v(" "),e("p",[t._v("// Assume you know what it is.")]),t._v(" "),e("h2",{attrs:{id:"patterns"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#patterns"}},[t._v("#")]),t._v(" Patterns")]),t._v(" "),e("h3",{attrs:{id:"approximate-string-matching"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#approximate-string-matching"}},[t._v("#")]),t._v(" Approximate String Matching")]),t._v(" "),e("p",[t._v("The formal definition of approximate string matching can be as below:")]),t._v(" "),e("blockquote",[e("p",[t._v("Find in the text or dictionary of size "),e("strong",[t._v("n")]),t._v(" all the words that match the given word\n(or start with the given word), taking into account "),e("strong",[t._v("k")]),t._v(" possible differences (errors).")])]),t._v(" "),e("p",[t._v("The closeness of "),e("em",[t._v("approximate")]),t._v(" is measured by the distance, the number of minimal\nstring operations necessary to convert a query to the string to match. For example,\nthe editors know that you have a "),e("em",[t._v("typa")]),t._v(" and decide to pop up "),e("em",[t._v("typo")]),t._v(" as a suggestion,\nbecause "),e("em",[t._v("typa")]),t._v(" has only one character to be substituted.")]),t._v(" "),e("p",[t._v("Some of the most well-known algorithms for the distance calculation includes:")]),t._v(" "),e("ul",[e("li",[t._v("Hamming distance.")]),t._v(" "),e("li",[t._v("Levenshtein distance, or edit distance.")]),t._v(" "),e("li",[t._v("Damerau-Levenshtein distance.")])]),t._v(" "),e("p",[t._v("Another approach is using "),e("a",{attrs:{href:"https://www.cse.unsw.edu.au/~weiw/project/tutorial-simjoin-SEBD08.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("string similarity join algorithm"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"hamming-distance"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hamming-distance"}},[t._v("#")]),t._v(" Hamming Distance")]),t._v(" "),e("p",[t._v("Example code:")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("hamming_distance")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""Return the Hamming distance between equal-length sequences"""')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" ValueError"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Undefined for sequences of unequal length"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("sum")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" el2 "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" el1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" el2 "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("zip")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("ul",[e("li",[t._v("Pros\n"),e("ul",[e("li",[t._v("Easy to understand.")])])]),t._v(" "),e("li",[t._v("Cons\n"),e("ul",[e("li",[t._v("Only for calculating a set of words of equal length.")])])])]),t._v(" "),e("p",[t._v("In general, the hamming distance is impractical, but it's helpful to learn other distance algorithms.")]),t._v(" "),e("h3",{attrs:{id:"levenshtein-distance"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#levenshtein-distance"}},[t._v("#")]),t._v(" Levenshtein Distance")]),t._v(" "),e("p",[t._v("Levenshtein distance, also called edit distance, calculates the number of\noperations including deletion, insertion, and substitution between the\ngiven query and the given term.")]),t._v(" "),e("p",[t._v("For example, a minimal edit script that transforms "),e("code",[t._v("enqueuezero")]),t._v(" to "),e("code",[t._v("enqueuezebra")]),t._v(" is 2:")]),t._v(" "),e("ul",[e("li",[t._v("Insert "),e("strong",[t._v("b")]),t._v(": enqueueze"),e("strong",[t._v("b")]),t._v("ro.")]),t._v(" "),e("li",[t._v("Substitute "),e("strong",[t._v("o")]),t._v(" to "),e("strong",[t._v("a")]),t._v(": enqueuezebr"),e("strong",[t._v("a")]),t._v(".")])]),t._v(" "),e("h3",{attrs:{id:"damerau-levenshtein-distance"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#damerau-levenshtein-distance"}},[t._v("#")]),t._v(" Damerau-Levenshtein distance")]),t._v(" "),e("p",[t._v("Damerau-Levenshtein distance is a variation of Levenshtein distance by adding\nan extra rule - transposition of two adjacent letters also counts as one\nof the operations, alongside with insertion, deletion, and substitution.")]),t._v(" "),e("h3",{attrs:{id:"difflib"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#difflib"}},[t._v("#")]),t._v(" difflib")]),t._v(" "),e("p",[t._v("Python function "),e("code",[t._v("difflib.get_close_matches")]),t._v(' returns a list of the best "good enough" matches. It\'s the quickest scripting function ready to use.')]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" difflib "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" get_close_matches\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" get_close_matches"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'appel'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ape'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'apple'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'peach'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'puppy'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'apple'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ape'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),e("h3",{attrs:{id:"bitap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bitap"}},[t._v("#")]),t._v(" Bitap")]),t._v(" "),e("p",[t._v("The Bitap algorithm is an approximate string matching algorithm, which tells if\na given text contains a substring that approximately equal to a given pattern.\nIt's fast because it's based on bitwise operations. It's most often used in the fuzzy search. Unix utility "),e("code",[t._v("agrep")]),t._v(" is atop bitap algorithm. The Bitap algorithm\ncan be based on both Hamming distance and Levenshtein distance.")]),t._v(" "),e("p",[t._v("An example implementation is here:\n"),e("a",{attrs:{href:"https://gist.github.com/soasme/22c6f083bc971ff381724fd3308a4be2",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://gist.github.com/soasme/22c6f083bc971ff381724fd3308a4be2"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("The disadvantage of Bitap is that it requires a fixed-length bit bucket for calculation.\nThe algorithm supports a large bit bucket, however, has poor performance when it's long.\nLuckily, in most cases, the search term has only a few characters.")]),t._v(" "),e("h3",{attrs:{id:"bigram-comparing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bigram-comparing"}},[t._v("#")]),t._v(" Bigram Comparing")]),t._v(" "),e("p",[t._v("Bigram comparing works well on variable length strings.\nThe idea is to de-composite the string into a set of bigrams - words that are\nwritten with two letters in an alphabetic writing system.")]),t._v(" "),e("p",[t._v("For example, "),e("code",[t._v("enqueuezero")]),t._v(" can be transformed to "),e("code",[t._v("en")]),t._v(", "),e("code",[t._v("nq")]),t._v(", "),e("code",[t._v("qu")]),t._v(", "),e("code",[t._v("ue")]),t._v(", ..., "),e("code",[t._v("ro")]),t._v(".\nWe then calculate the number of same bigrams in both query and string to match.\nBelow is an example of Python implementation. "),e("a",{attrs:{href:"https://stackoverflow.com/questions/653157/a-better-similarity-ranking-algorithm-for-variable-length-strings",target:"_blank",rel:"noopener noreferrer"}},[t._v("1"),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_bigrams")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    s "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lower"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("s"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_similarity_score")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("query"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" match"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    query_bigrams "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" get_bigrams"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("query"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    match_bigrams "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" get_bigrams"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    hit "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" query_bigrams"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" y "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" match_bigrams"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" y"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                hit "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hit "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("query_bigrams"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match_bigrams"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h2",{attrs:{id:"conclusions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#conclusions"}},[t._v("#")]),t._v(" Conclusions")]),t._v(" "),e("p",[t._v("Fuzzy search can be applied whenever there is a search box. Under the hood, the fuzzy\nsearch requires approximate string matching. Among all algorithms, the Bitap algorithm\nis perhaps the best-known for approximate string matching.  However, it doesn't\nfit the case in which the searching dataset is huge since it requires a full scanning.\nPython function "),e("code",[t._v("get_close_matches")]),t._v(" in standard lib "),e("code",[t._v("difflib")]),t._v(" is the handiest tool\nready to use.")]),t._v(" "),e("p",[t._v("Installing fuzzy search plugin or utilities save a few seconds every time and thus several\nhours and days in your work and life.")]),t._v(" "),e("h2",{attrs:{id:"references"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[t._v("#")]),t._v(" References")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://whatis.techtarget.com/definition/fuzzy-search",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fuzzy Search"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Approximate_string_matching",target:"_blank",rel:"noopener noreferrer"}},[t._v("Approximate string matching"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Bitap_algorithm",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bitap Algorithm"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://docs.python.org/3/library/difflib.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("difflib — Helpers for computing deltas"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"http://ntz-develop.blogspot.com/2011/03/fuzzy-string-search.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fuzzy string search"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=n.exports}}]);