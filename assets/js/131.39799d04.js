(window.webpackJsonp=window.webpackJsonp||[]).push([[131],{515:function(e,r,t){"use strict";t.r(r);var a=t(54),s=Object(a.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"ripgrep"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ripgrep"}},[e._v("#")]),e._v(" ripgrep")]),e._v(" "),t("p",[e._v("ripgrep is a line-oriented search tool that recursively searches your current directory for a regex pattern while respecting your "),t("code",[e._v(".gitignore")]),e._v(" rules. It's a replacement of searching tools like "),t("a",{attrs:{href:"https://geoff.greer.fm/ag/",target:"_blank",rel:"noopener noreferrer"}},[e._v("The Silver Searcher"),t("OutboundLink")],1),e._v(", "),t("a",{attrs:{href:"https://beyondgrep.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ack"),t("OutboundLink")],1),e._v(", "),t("a",{attrs:{href:"https://linuxcommand.org/lc3_man_pages/grep1.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("grep"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#basic-usage"}},[e._v("Basic Usage")])]),t("li",[t("a",{attrs:{href:"#advanced-usage"}},[e._v("Advanced Usage")])]),t("li",[t("a",{attrs:{href:"#read-the-source-code"}},[e._v("Read the source code")])]),t("li",[t("a",{attrs:{href:"#discussions"}},[e._v("Discussions")])]),t("li",[t("a",{attrs:{href:"#references"}},[e._v("References")])])])]),t("p"),e._v(" "),t("h2",{attrs:{id:"basic-usage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#basic-usage"}},[e._v("#")]),e._v(" Basic Usage")]),e._v(" "),t("p",[e._v("Search by a literal term. Command: "),t("code",[e._v("rg <term> <file>")]),e._v(". For example, "),t("code",[e._v("rg ripgrep ./utilities/ripgrep.md")]),e._v(".")]),e._v(" "),t("p",[e._v("Search by a regex expression. Command "),t("code",[e._v("rg '<regex>' <file>")]),e._v(". For example, "),t("code",[e._v("rg '\\w+grep' utilities/ripgrep.md")]),e._v(".")]),e._v(" "),t("p",[e._v("Search by a regex expression with escaped characters. For example, "),t("code",[e._v("rg 'def iterate\\(.*\\):'")]),e._v(".")]),e._v(" "),t("p",[e._v("Search recursively from an entire directory of files. Command "),t("code",[e._v("rg '<regex>'")]),e._v(". For example, "),t("code",[e._v("rg '\\w+grep'")]),e._v(".")]),e._v(" "),t("p",[e._v("Ignore hidden files, or binary files, or symlink files, or files defined in "),t("code",[e._v(".gitignore")]),e._v(" by default, though you can turn it on by adding more "),t("code",[e._v("u")]),e._v(" options: "),t("code",[e._v("-u/-uu/-uuu/-uuuu")]),e._v(".")]),e._v(" "),t("p",[e._v("Filter when term appearing in certain files. Command "),t("code",[e._v("rg <term> -g '*.<prefix>'")]),e._v(". For example, "),t("code",[e._v("rg ripgrep -g '*.md'")]),e._v(" only matches ripgrep in a markdown document.")]),e._v(" "),t("p",[e._v("Filter when the term is not appearing in certain files. Command "),t("code",[e._v("rg <term> -g '!*.<prefix>'")]),e._v(". For example, "),t("code",[e._v("rg ripgrep -g '!*.md'")]),e._v(" matches ripgrep in any document except markdown.")]),e._v(" "),t("p",[e._v("Filter by file type. Command "),t("code",[e._v("rg <term> -t<type>")]),e._v(". For example, "),t("code",[e._v("rg ripgrep -tmd")]),e._v(".")]),e._v(" "),t("p",[e._v("Replace term1 to term2 in output. Command "),t("code",[e._v("rg <term1> -r/--replace <term2>")]),e._v(". For example, "),t("code",[e._v("rg ripgrep --replace rg")]),e._v(".")]),e._v(" "),t("p",[e._v("Replace by regex grouping in output. Command "),t("code",[e._v("rg '<re1>' -r/--replace '<re2>'")]),e._v(". For example, "),t("code",[e._v("rg 'title: (?P<title>ripgrep)' --replace 'Title: $title'")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"advanced-usage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#advanced-usage"}},[e._v("#")]),e._v(" Advanced Usage")]),e._v(" "),t("p",[e._v("Q: How to search "),t("code",[e._v("-foo")]),e._v("?"),t("br"),e._v("\nA: You can use the -e/--regexp flag like "),t("code",[e._v("rg -e -foo")]),e._v(". Or, you can use "),t("code",[e._v("rg -- -foo")]),e._v(" as the special '--' delimiter indicates that no more flags will be provided.")]),e._v(" "),t("p",[e._v("Q: How to show N lines after or before matching lines?"),t("br"),e._v("\nA: You can use "),t("code",[e._v("-A")]),e._v(" / "),t("code",[e._v("-B")]),e._v(". For example, "),t("code",[e._v("rg term -A 1 -B 1")]),e._v(" outputs 1 line (A)fter and 1 line (B)efore the matched line.")]),e._v(" "),t("p",[e._v("Q: How to search in ZIP?"),t("br"),e._v("\nA: You can use "),t("code",[e._v("-z/--search-zip")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"read-the-source-code"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#read-the-source-code"}},[e._v("#")]),e._v(" Read the source code")]),e._v(" "),t("p",[e._v("The source code of Ripgrep program reveals it runs below steps for each searching command execution:")]),e._v(" "),t("ul",[t("li",[e._v("Entry point. "),t("a",{attrs:{href:"https://github.com/BurntSushi/ripgrep/blob/master/src/main.rs",target:"_blank",rel:"noopener noreferrer"}},[e._v("src/main.rs"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("Parse options and arguments. "),t("a",{attrs:{href:"https://github.com/BurntSushi/ripgrep/blob/master/src/app.rs",target:"_blank",rel:"noopener noreferrer"}},[e._v("src/app.rs"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("li",[e._v("Gather files to search. "),t("a",{attrs:{href:"https://github.com/BurntSushi/ripgrep/blob/master/src/args.rs",target:"_blank",rel:"noopener noreferrer"}},[e._v("src/args.rs:"),t("code",[e._v("walker_builder")]),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("li",[e._v("Apply each line of content in these files to the Regex engine. "),t("a",{attrs:{href:"https://github.com/BurntSushi/ripgrep/blob/master/src/args.rs",target:"_blank",rel:"noopener noreferrer"}},[e._v("src/args.rs:"),t("code",[e._v("search_worker")]),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("li",[e._v("Print those matched lines. "),t("a",{attrs:{href:"https://github.com/BurntSushi/ripgrep/blob/master/src/args.rs",target:"_blank",rel:"noopener noreferrer"}},[e._v("src/args.rs:"),t("code",[e._v("printer_standard")]),t("OutboundLink")],1),e._v(".")])]),e._v(" "),t("p",[e._v("Simplified Rust code:")]),e._v(" "),t("div",{staticClass:"language-rust extra-class"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" args "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Args")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("parse")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("mut")]),e._v(" searcher "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("search_worker")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("stdout")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" result "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("walker")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("?")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" subject "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" subject_builder"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("build_from_result")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    searcher"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("search")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),e._v("subject"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),t("p",[e._v("ripgrep simplifies the construction of arguments and parameters by the builder design pattern.")]),e._v(" "),t("h2",{attrs:{id:"discussions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#discussions"}},[e._v("#")]),e._v(" Discussions")]),e._v(" "),t("p",[e._v("There are two major grepping utility-families: grep and ack. The former is for the plain searching, and the latter does smart searching, meaning it knows what files should be filtered out. ripgrep is a hybrid solution.")]),e._v(" "),t("p",[e._v("Scanning all files in current working directory seems easy but a challenge to be fast. It involves using a set of tricks to do system call as less as possible. ripgrep uses a Rust library "),t("a",{attrs:{href:"https://docs.rs/walkdir/2.2.7/walkdir/",target:"_blank",rel:"noopener noreferrer"}},[e._v("walkdir"),t("OutboundLink")],1),e._v(" for the best performance.")]),e._v(" "),t("p",[e._v("Distributing work to a set of workers makes grepping faster, though mutex synchronization makes it slower. ripgrep avoids the mutex lock by using a lock-free solution - "),t("a",{attrs:{href:"https://github.com/kinghajj/deque",target:"_blank",rel:"noopener noreferrer"}},[e._v("Chase-Lev work-stealing queue"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("Searching via regex can be slow sometimes, for example, "),t("code",[e._v("'(a*)*c'")]),e._v(" takes a long time to terminate if using a backtracing engine. ripgrep uses Rust default regex engine, which uses finite automata instead of backtracking.")]),e._v(" "),t("p",[e._v("ripgrep loads a large chunk of data from a file, instead of line by line, which reduces the I/O overhead.")]),e._v(" "),t("h2",{attrs:{id:"references"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" References")]),e._v(" "),t("blockquote",[t("p",[e._v('skim + ripgrep + bat makes for an amazing combination for fuzzy search opening files with preview. Added "skvi" for fuzzy search open vim and "rgvi" for combining ripgrep search + vim opening. Aliases are here: '),t("a",{attrs:{href:"https://t.co/2gJLJKm1OY",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://t.co/2gJLJKm1OY"),t("OutboundLink")],1),e._v(" - "),t("a",{attrs:{href:"https://twitter.com/mitsuhiko/status/1070784353360318464",target:"_blank",rel:"noopener noreferrer"}},[e._v("@mitsuhiko"),t("OutboundLink")],1)])]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/BurntSushi/ripgrep",target:"_blank",rel:"noopener noreferrer"}},[e._v("BurntSushi/ripgrep"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://blog.burntsushi.net/ripgrep/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ripgrep is faster than {grep, ag, git grep, ucg, pt, sift}"),t("OutboundLink")],1),e._v(" explains why you should use ripgrep over any other search tool?")])])])}),[],!1,null,null,null);r.default=s.exports}}]);