(window.webpackJsonp=window.webpackJsonp||[]).push([[160],{548:function(e,t,o){"use strict";o.r(t);var n=o(54),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"_2019-12"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_2019-12"}},[e._v("#")]),e._v(" 2019-12")]),e._v(" "),o("p",[o("a",{attrs:{href:"https://code.fb.com/security/homomorphic-hashing/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Homomorphic hashing for secure update propagation - Facebook Code"),o("OutboundLink")],1)]),e._v(" "),o("p",[o("strong",[e._v("Homomorphic hashing")]),e._v(" is a cryptographic primitive that can efficient make file distribution and memory integrity checking. "),o("strong",[e._v("LtHash")]),e._v(" is a specific homomorphic hashing algorithm, within the update propagation step of the "),o("em",[e._v("Location Aware Distribution")]),e._v(" configuration management system.")]),e._v(" "),o("p",[e._v("The challenge of securing update propagation at scale is "),o("strong",[e._v("handling frequent updates with a centralized distributor can saturate the system")]),e._v(".")]),e._v(" "),o("p",[e._v("The solution is to "),o("strong",[e._v("to delegate the propagation through its clients")]),e._v(", meaning some subscribers can participate in forwarding the distributor’s original updates to other subscribers.")]),e._v(" "),o("p",[o("img",{attrs:{src:"https://code.fb.com/wp-content/uploads/2019/02/HH2.jpg",alt:""}})]),e._v(" "),o("p",[e._v("From an implementation perspective, it requires "),o("strong",[e._v("Signing each update")]),e._v(", "),o("strong",[e._v("Signing the database")]),e._v(", and "),o("strong",[e._v("Efficiently updatable hashing")]),e._v(".")]),e._v(" "),o("p",[e._v("Intuitively, homomorphic hashing answers the question, “Given the hash of an input, along with a small update to that input, how can we compute the hash of the new input (with the update applied) without having to recompute the entire hash from scratch?”")]),e._v(" "),o("hr"),e._v(" "),o("p",[o("a",{attrs:{href:"https://blog.golang.org/using-go-modules",target:"_blank",rel:"noopener noreferrer"}},[e._v("Using Go Modules - The Go Blog"),o("OutboundLink")],1)]),e._v(" "),o("ul",[o("li",[o("code",[e._v("go mod init")]),e._v(" creates a new module, initializing the "),o("code",[e._v("go.mod")]),e._v(" file that describes it.")]),e._v(" "),o("li",[o("code",[e._v("go build")]),e._v(", "),o("code",[e._v("go test")]),e._v(", and other package-building commands add new dependencies to "),o("code",[e._v("go.mod")]),e._v(" as needed.")]),e._v(" "),o("li",[o("code",[e._v("go list -m all")]),e._v(" prints the current module’s dependencies.")]),e._v(" "),o("li",[o("code",[e._v("go get")]),e._v(" changes the required version of a dependency (or adds a new dependency).")]),e._v(" "),o("li",[o("code",[e._v("go mod tidy")]),e._v(" removes unused dependencies.")])]),e._v(" "),o("hr"),e._v(" "),o("p",[o("a",{attrs:{href:"https://www.prowesscorp.com/computer-latency-at-a-human-scale/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Computer Latency at a Human Scale"),o("OutboundLink")],1)]),e._v(" "),o("p",[e._v("If say 1 CPU cycle took 1 second, then an Internet call across Pacific Ocean would take 11 years!")]),e._v(" "),o("p",[e._v("Therefore, we must keep "),o("strong",[e._v("latency")]),e._v(" in mind! When making a microservices call or getting cloud-based data, the application takes more time comparing to the slowest calls to storage. Optimizing your code to work in memory could be a wasted effort.")]),e._v(" "),o("p",[o("img",{attrs:{src:"https://www.prowesscorp.com/wp-content/uploads/2017/06/LatencyBlog.png",alt:""}})]),e._v(" "),o("hr"),e._v(" "),o("p",[o("a",{attrs:{href:"https://medium.com/@dominik.tornow/inside-kubernetes-rbac-9988b08a738a",target:"_blank",rel:"noopener noreferrer"}},[e._v("Inside Kubernetes RBAC"),o("OutboundLink")],1)]),e._v(" "),o("p",[e._v("This post provides a concise, detailed model of Kubernetes’ Role-based Access Control (RBAC). The Kubernetes API is an Http API that provides Create/Read/Update/Delete access to query and modify the Kubernetes Object Store. Kubernetes supports multiple authentication and authorization strategies to control the access to the API.")]),e._v(" "),o("p",[o("img",{attrs:{src:"https://cdn-images-1.medium.com/max/1600/1*IPaeQvr1NX0wGx-V8D3rRw.png",alt:""}})]),e._v(" "),o("p",[o("strong",[e._v("General authorization")]),e._v(" indicates a relation "),o("em",[e._v("hasAccess")]),e._v(" between a requesting user and a requested operation. Role-based authorization can be modeled as two relations, a relation matches between a role and a user and a relation grants between a role and an operation.")]),e._v(" "),o("p",[e._v("Kubernetes provides 4 Kubernetes Object Kinds to express Role-based Authorization, "),o("em",[e._v("Roles")]),e._v(" and "),o("em",[e._v("Cluster Roles")]),e._v(" as well as "),o("em",[e._v("Role Bindings")]),e._v(" and "),o("em",[e._v("Cluster Role Bindings")]),e._v(".")]),e._v(" "),o("hr"),e._v(" "),o("p",[o("a",{attrs:{href:"https://www.internalpointers.com/post/gentle-introduction-multithreading",target:"_blank",rel:"noopener noreferrer"}},[e._v("A gentle introduction to multithreading"),o("OutboundLink")],1)]),e._v(" "),o("p",[e._v("A nice post explaining process, multithreading, green threads, concurrency, and parallelism.")]),e._v(" "),o("hr"),e._v(" "),o("p",[o("a",{attrs:{href:"https://pypy.readthedocs.io/en/latest/stackless.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Application-level Stackless features - PyPy documentation"),o("OutboundLink")],1)]),e._v(" "),o("p",[e._v("Currently PyPy implements greenlets on top of continulets. It also implements (an approximation of) tasklets and channels, emulating the model of Stackless Python.")]),e._v(" "),o("p",[e._v("Continulets are extremely light-weight, thought it consumes at least one page of physical memory (4KB) per live continulet, and half a megabyte of virtual memory on 32-bit or a complete megabyte on 64-bit.")]),e._v(" "),o("p",[e._v("The fundamental idea is that, at any point in time, the program happens to run one stack of frames (or one per thread, in case of multi-threading).")])])}),[],!1,null,null,null);t.default=a.exports}}]);