(window.webpackJsonp=window.webpackJsonp||[]).push([[145],{529:function(e,t,r){"use strict";r.r(t);var o=r(54),a=Object(o.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"enqueuezero-techshack-2019-02"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#enqueuezero-techshack-2019-02"}},[e._v("#")]),e._v(" EnqueueZero Techshack 2019-02")]),e._v(" "),r("TechshackHeader"),e._v(" "),r("h2",{attrs:{id:"dive-into-deep-learning"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dive-into-deep-learning"}},[e._v("#")]),e._v(" Dive into Deep Learning")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://d2l.ai/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("d2l.ai"),r("OutboundLink")],1),e._v(" | "),r("a",{attrs:{href:"https://zh.d2l.ai/",target:"_blank",rel:"noopener noreferrer"}},[e._v("zh.d2l.ai"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("This is a nice book to keep up the tread of Deep Learning. It explains the "),r("a",{attrs:{href:"https://d2l.ai/chapter_deep-learning-basics/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Deep Learning Basics"),r("OutboundLink")],1),e._v(" "),r("a",{attrs:{href:"https://d2l.ai/chapter_convolutional-neural-networks/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("CNN"),r("OutboundLink")],1),e._v(", "),r("a",{attrs:{href:"https://d2l.ai/chapter_recurrent-neural-networks/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("RNN"),r("OutboundLink")],1),e._v(", "),r("a",{attrs:{href:"https://d2l.ai/chapter_natural-language-processing/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("NLP"),r("OutboundLink")],1),e._v(", etc. Each chapter goes with mathematics, figures and code.")]),e._v(" "),r("h2",{attrs:{id:"the-architecture-of-skipper"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#the-architecture-of-skipper"}},[e._v("#")]),e._v(" The Architecture of Skipper")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://opensource.zalando.com/skipper/reference/architecture/",target:"_blank",rel:"noopener noreferrer"}},[e._v("opensource.zalando.com"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://opensource.zalando.com/skipper/reference/architecture/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Skipper"),r("OutboundLink")],1),e._v(" is an HTTP router and reverse proxy for service composition.")]),e._v(" "),r("ul",[r("li",[e._v("It's released as a server package "),r("code",[e._v("skipper")]),e._v(" and a client package "),r("code",[e._v("eskip")]),e._v(".")]),e._v(" "),r("li",[e._v("The "),r("code",[e._v("skipper")]),e._v(" package can load routes from both "),r("code",[e._v("eskip")]),e._v(" config file and Kubernetes Ingress resource objects.")]),e._v(" "),r("li",[e._v("The internal package "),r("code",[e._v("proxy")]),e._v(" of "),r("code",[e._v("skipper")]),e._v(" dynamically changes routing table populated by "),r("code",[e._v("skipper")]),e._v(".")]),e._v(" "),r("li",[e._v("A route is one entry in the routing table, consisting of "),r("code",[e._v("predicates")]),e._v(" for routing HTTP requests, "),r("code",[e._v("filters")]),e._v(" for modifying the request and the response, and a backend, or "),r("code",[e._v("<shunt>")]),e._v(" or "),r("code",[e._v("<loopback>")]),e._v(".")])]),e._v(" "),r("p",[r("img",{attrs:{src:"https://opensource.zalando.com/skipper/img/architecture.svg",alt:"Skipper Architecture"}})]),e._v(" "),r("p",[e._v("For each request,")]),e._v(" "),r("ul",[r("li",[e._v("Proxy creates a context enhancing it with an Opentracing API Span.")]),e._v(" "),r("li",[e._v("Proxy checks ratelimits and lookup the route in the routing table.")]),e._v(" "),r("li",[e._v("Skipper applies request filters.")]),e._v(" "),r("li",[e._v("Skipper checks route local ratelimits, the circuitbreakers and do the backend call.\n"),r("ul",[r("li",[e._v("Skipper automatically retry if there is TCP/TLS connection error.")])])]),e._v(" "),r("li",[e._v("Skipper applies response filters.")])]),e._v(" "),r("p",[e._v("Two special cases that skipper won't forward requests to the backend.")]),e._v(" "),r("ul",[r("li",[e._v("Shunted route("),r("code",[e._v("<shunt>")]),e._v("): skipper serves the request alone, by using only the filters.")]),e._v(" "),r("li",[e._v("Loopback route("),r("code",[e._v("<loopback>")]),e._v("): the request is passed to the routing table for finding another route, based on the changes that the filters made to the request.")])]),e._v(" "),r("p",[r("img",{attrs:{src:"https://opensource.zalando.com/skipper/img/req-and-resp-processing.svg",alt:"Request"}})]),e._v(" "),r("h2",{attrs:{id:"tools-for-creating-beautiful-diagrams"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tools-for-creating-beautiful-diagrams"}},[e._v("#")]),e._v(" Tools for creating beautiful diagrams")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://news.ycombinator.com/item?id=18788244",target:"_blank",rel:"noopener noreferrer"}},[e._v("news.ycombinator.com"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("Tools mentioned in the thread: yeD, draw.io, visio, plantuml, simplediagrams, AsciiFlow, Gliffy, Omnigraffle, Graphviz, ipe, Dia, gravit.io, limnu.com, LucidChart, plotdevice.io, monodraw, mermaid, whimsical.co, LaTeX/TikZ, ...")]),e._v(" "),r("blockquote",[r("p",[e._v("This is HN at it’s best, nobody answered the original question.")])]),e._v(" "),r("h2",{attrs:{id:"understanding-parser-combinators"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#understanding-parser-combinators"}},[e._v("#")]),e._v(" Understanding Parser Combinators")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://fsharpforfunandprofit.com/posts/understanding-parser-combinators/",target:"_blank",rel:"noopener noreferrer"}},[e._v("fsharpforfunandprofit.com 1"),r("OutboundLink")],1),e._v(" | "),r("a",{attrs:{href:"https://fsharpforfunandprofit.com/posts/understanding-parser-combinators-2/",target:"_blank",rel:"noopener noreferrer"}},[e._v("fsharpforfunandprofit.com 2"),r("OutboundLink")],1),e._v(" | "),r("a",{attrs:{href:"https://fsharpforfunandprofit.com/posts/understanding-parser-combinators-3/",target:"_blank",rel:"noopener noreferrer"}},[e._v("fsharpforfunandprofit.com 3"),r("OutboundLink")],1),e._v(" | "),r("a",{attrs:{href:"https://fsharpforfunandprofit.com/posts/understanding-parser-combinators-4/",target:"_blank",rel:"noopener noreferrer"}},[e._v("fsharpforfunandprofit.com 4"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("The series provides a step-by-step tutorial on creating a basic JSON parser library by parser combinators. Although the implementation is in F#, the concept is the same in other programming languages.")]),e._v(" "),r("ul",[r("li",[e._v('Step 1: The parser gives the result (true, "remaining characters") or (false, "original characters"), according to if the parser can successfully consume the characters.')]),e._v(" "),r("li",[e._v('Step 2: The parser gives the result ("success message", "remaining characters") or ("error message", "original characters").')]),e._v(" "),r("li",[e._v("Step 3: The parser gives the result Success(charToMatch, remaining) or Failure(message).")]),e._v(" "),r("li",[e._v("Step 4: Convert the parser function to a curried implementation to support more characters.")]),e._v(" "),r("li",[e._v("Step 5: Encapsulate the parsing function in a type.")]),e._v(" "),r("li",[e._v("Step 6: Implement andThen combinator. For example, "),r("code",[e._v("parserA andThen parserB")]),e._v(" = handle char A, and then handle char B.")]),e._v(" "),r("li",[e._v('Step 7: Similarly, implement "orElse" combinator.')]),e._v(" "),r("li",[e._v("Step 8: Use "),r("code",[e._v("mapP")]),e._v(" to support parsing multiple characters at once and aggregating them into a string. For example, "),r("code",[e._v('run parseThreeDigitsAsInt "123A"')]),e._v(" gives "),r("code",[e._v('Success(123, "A")')])]),e._v(" "),r("li",[e._v("Step 9: Use "),r("code",[e._v("sequence")]),e._v(" to transform a list of parsers into a single parser. For example, "),r("code",[e._v("let combined = sequence [parseThreeDigitsAsInt; parserA]")]),e._v(' can parse "123AZ" to '),r("code",[e._v("Success([123, 'A'], \"Z\")")]),e._v(".")]),e._v(" "),r("li",[e._v("Step 10: Use "),r("code",[e._v("many")]),e._v(" / "),r("code",[e._v("many1")]),e._v(" to match a parser multiple times, pretty much like regex "),r("code",[e._v("(pattern)*")]),e._v(" and "),r("code",[e._v("(pattern)+")]),e._v(".")]),e._v(" "),r("li",[e._v("Step 11: Throw some results away. For example, when parsing "),r("code",[e._v("'abc'")]),e._v(", we want the result "),r("code",[e._v('String("abc")')]),e._v(", not "),r("code",[e._v("String(\"'abc'\")")]),e._v(".")]),e._v(" "),r("li",[e._v("Step 12: Add error messages if the input is incorrect.")]),e._v(" "),r("li",[e._v("Step 13: Apply all blocks introduced above and define the JSON parsing rules "),r("a",{attrs:{href:"https://www.json.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.json.org/"),r("OutboundLink")],1)])]),e._v(" "),r("h2",{attrs:{id:"many-nodes-one-distributed-system"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#many-nodes-one-distributed-system"}},[e._v("#")]),e._v(" Many Nodes, One Distributed System")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://medium.com/baseds/many-nodes-one-distributed-system-9921f85205c4",target:"_blank",rel:"noopener noreferrer"}},[e._v("medium.com"),r("OutboundLink")],1)]),e._v(" "),r("ul",[r("li",[e._v("A single process or computer that does not communicate with others is "),r("strong",[e._v("NOT")]),e._v(" a distributed system.")]),e._v(" "),r("li",[e._v("A distributed system involves multiple entities talking to one another in some way, while also performing their own operations.")]),e._v(" "),r("li",[e._v("If the system is a bunch of distributed servers, then maybe the components could be referred to as “servers”; if the system involves processes talking to one another, then perhaps the entities are just “processes”. Whatever it is, we call it nodes, the individual entities in a distributed system.")]),e._v(" "),r("li",[e._v("The nodes in a distributed system run their own operations - these operations are fast. But the nodes also communicate with each other - communication is slow, which happens to be one of the biggest problems in distributed computing.")])]),e._v(" "),r("h2",{attrs:{id:"the-state-of-grpc-in-the-browser"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#the-state-of-grpc-in-the-browser"}},[e._v("#")]),e._v(" The state of gRPC in the browser")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://grpc.io/blog/state-of-grpc-web",target:"_blank",rel:"noopener noreferrer"}},[e._v("grpc.io"),r("OutboundLink")],1)]),e._v(" "),r("ul",[r("li",[e._v("The challenge of gRPC in the browser: There is no way to force using HTTP/2. Also, The browser doesn't support accessing raw HTTP/2 frames.")]),e._v(" "),r("li",[e._v("How to rescue? Place a gRPC-Web as a proxy in between the browser side and the gRPC server side. The proxy can support both HTTP/1 and HTTP/2.")]),e._v(" "),r("li",[e._v("There are two implementations of gPRC-web: "),r("a",{attrs:{href:"https://github.com/improbable-eng/grpc-web",target:"_blank",rel:"noopener noreferrer"}},[e._v("improbable-eng/grpc-web"),r("OutboundLink")],1),e._v(" and "),r("a",{attrs:{href:"https://github.com/grpc/grpc-web",target:"_blank",rel:"noopener noreferrer"}},[e._v("grpc/grpc-web"),r("OutboundLink")],1),e._v(".")])]),e._v(" "),r("p",[r("img",{attrs:{src:"https://grpc.io/img/grpc-web-proxy.png",alt:""}})]),e._v(" "),r("h2",{attrs:{id:"how-to-speed-up-the-code-review"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#how-to-speed-up-the-code-review"}},[e._v("#")]),e._v(" How To Speed Up The Code Review")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://sergeyzhuk.me/2018/12/29/code_review/",target:"_blank",rel:"noopener noreferrer"}},[e._v("sergeyzhuk.me"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("Review strategies:")]),e._v(" "),r("ul",[r("li",[e._v("Feature changes: fulfillment of business requirements and design.")]),e._v(" "),r("li",[e._v("Structure refactoring: backward compatibility and design improvements.")]),e._v(" "),r("li",[e._v("Simple refactoring: readability improvements. Because these changes are mostly may be done by IDE.")]),e._v(" "),r("li",[e._v("Renaming/removing classes: whether the namespaces structure has become better.")]),e._v(" "),r("li",[e._v("Removing unused code: backward compatibility.")]),e._v(" "),r("li",[e._v("Code style fixes: in most cases instant merge.")]),e._v(" "),r("li",[e._v("Formatting fixes in most cases instant merge.")]),e._v(" "),r("li",[e._v("Simple refactoring. The code has become more readable? - merge.")]),e._v(" "),r("li",[e._v("Renaming/moving classes. The class has been moved to a better namespace? - merge.")]),e._v(" "),r("li",[e._v("Removing unused (dead) code - merge.")]),e._v(" "),r("li",[e._v("Code style or formatting fixes - merge, people shouldn’t review them, it is the task for linters.")])]),e._v(" "),r("p",[r("strong",[e._v("Don’t create huge pull-requests with mixed categories of changes.")])]),e._v(" "),r("ul",[r("li",[e._v("Optimize your code for reading. The code is read much more often than it is written.")]),e._v(" "),r("li",[e._v("Describe suggested changes in order to provide a context for diffs in the request.")]),e._v(" "),r("li",[e._v("You should review your code by yourself before submitting the request. Review your own request as it is not yours. Sometimes you may find something you have missed. This will reduce the circles of rejecting/fixing.")])]),e._v(" "),r("h2",{attrs:{id:"monorepo-please-do-v-s-please-don-t"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#monorepo-please-do-v-s-please-don-t"}},[e._v("#")]),e._v(" Monorepo: Please do v/s Please don't")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://medium.com/@adamhjk/monorepo-please-do-3657e08a4b70",target:"_blank",rel:"noopener noreferrer"}},[e._v("do"),r("OutboundLink")],1),e._v(" v/s "),r("a",{attrs:{href:"https://medium.com/@mattklein123/monorepos-please-dont-e9a279be011b",target:"_blank",rel:"noopener noreferrer"}},[e._v("don't"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://en.wikipedia.org/wiki/Monorepo",target:"_blank",rel:"noopener noreferrer"}},[e._v("Monorepo"),r("OutboundLink")],1),e._v(" a software development strategy where code for many projects are stored in the same repository.")]),e._v(" "),r("ul",[r("li",[e._v("Though we get the benefit of easier collaboration / code sharing / single build / no dependency management, it creates tight coupling, and more importantly, at scale, a monorepo must solve every problem that a polyrepo must solve, with the downside of encouraging tight coupling, and the additional herculean effort of tackling VCS scalability.")]),e._v(" "),r("li",[e._v("The default behavior of a polyrepo is isolation — that’s the whole point. The default behavior of a monorepo is shared responsibility and visibility — that’s the whole point.")])]),e._v(" "),r("h2",{attrs:{id:"netflix-play-api-building-an-evolutionary-architecture"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#netflix-play-api-building-an-evolutionary-architecture"}},[e._v("#")]),e._v(" Netflix Play API: Building an Evolutionary Architecture")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://www.infoq.com/news/2019/01/netflix-evolution-architecture",target:"_blank",rel:"noopener noreferrer"}},[e._v("infoq.com"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("Key takeaways from the talk included:")]),e._v(" "),r("ul",[r("li",[e._v("Services that have a single identity/responsibility are easier to maintain and upgrade.")]),e._v(" "),r("li",[e._v("Engineers should spend time identifying core decisions when building services if they requires thorough deliberation or rapid experimentations.")]),e._v(" "),r("li",[e._v("Engineers should start asking why a service exists in order to determine its responsibility.")]),e._v(" "),r("li",[e._v("Identify your Type 1 and Type 2 decisions; Spend 80% of your time debating and aligning on Type 1 decisions.\n"),r("ul",[r("li",[r("blockquote",[r("p",[e._v("Type 1 decisions are highly consequential and have long-ranging impact, and so these decisions must by made methodically and by engaging in consultation with others.")])])]),e._v(" "),r("li",[r("blockquote",[r("p",[e._v('Type 2 decisions are easily changeable, and do not have long-ranging implications, and therefore these decisions should be made quickly and by "high judgements individuals or small groups".')])])])])])]),e._v(" "),r("h2",{attrs:{id:"logs-and-metrics-and-graphs-oh-my"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#logs-and-metrics-and-graphs-oh-my"}},[e._v("#")]),e._v(" Logs and Metrics and Graphs, Oh My!")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://grafana.com/blog/2016/01/05/logs-and-metrics-and-graphs-oh-my/",target:"_blank",rel:"noopener noreferrer"}},[e._v("grafana.com"),r("OutboundLink")],1)]),e._v(" "),r("ul",[r("li",[e._v("The goal of monitoring is to be able to detect, debug and resolve any problems that occur.")]),e._v(" "),r("li",[e._v("Monitoring means knowing what’s going on inside your system, how much traffic it’s getting, how it’s performing, how many errors there are.")]),e._v(" "),r("li",[e._v("Logs come from Unix system, applications.")]),e._v(" "),r("li",[e._v("Metrics are variables collected from applications.")]),e._v(" "),r("li",[e._v("Both approaches allow creation of high-level graphs to know how many requests your application is serving, how quickly and with how many errors. Both also allow you to slice and dice.")]),e._v(" "),r("li",[e._v("Metrics give you an aggregated view over this instrumentation, meaning they can look your system from an overall perspective.")]),e._v(" "),r("li",[e._v("Logs give you a view of a smaller number of metrics, meaning you can drill down to a specific incident.")]),e._v(" "),r("li",[e._v("Logs and metrics are complementary.")])]),e._v(" "),r("h2",{attrs:{id:"courier-dropbox-migration-to-grpc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#courier-dropbox-migration-to-grpc"}},[e._v("#")]),e._v(" Courier: Dropbox migration to gRPC")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://blogs.dropbox.com/tech/2019/01/courier-dropbox-migration-to-grpc/",target:"_blank",rel:"noopener noreferrer"}},[e._v("blogs.dropbox.com"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("Dropbox's core SOA framework is Courier, a gRPC-based protocol.")]),e._v(" "),r("ul",[r("li",[e._v("It encodes each service's identity into the TLS certificate. Plus, it brings Access Control Lists (ACLs) and rate limits.")]),e._v(" "),r("li",[e._v("By using the service identity, the service's logs, stats, traces are searchable in the dashboard. Each service has granular attribution of load, errors, and latency.")]),e._v(" "),r("li",[e._v("Every gRPC request includes a deadline, indicating how long the client will wait for a reply.")]),e._v(" "),r("li",[e._v("It introduces an LIFO queue acting as an automatic circuit breaker. The queue is not only bounded by size, but critically, it’s also bounded by time. A request can only spend so long in the queue.")]),e._v(" "),r("li",[e._v("It modifies both gRPC-core and gRPC-python to support session resumption to not do TLS handshake at all, which makes the request faster.")]),e._v(" "),r("li",[e._v("Migrate from the old RPC framework to Courier.\n"),r("ol",[r("li",[e._v("Write a common interface supporting both the two.")]),e._v(" "),r("li",[e._v("Migrate to the new.")]),e._v(" "),r("li",[e._v("Switch clients to use Courier RPC")]),e._v(" "),r("li",[e._v("Clean up the legacy code.")])])]),e._v(" "),r("li",[e._v("Lesson Learned\n"),r("ul",[r("li",[e._v("Observability is a feature. Having all the metrics and breakdowns out-of-the-box is invaluable during troubleshooting.")]),e._v(" "),r("li",[e._v("Standardization and uniformity are important. They lower cognitive load, and simplify operations and code maintenance.")]),e._v(" "),r("li",[e._v("Try to minimize the amount of boilerplate code developers need to write. Codegen is your friend here.")]),e._v(" "),r("li",[e._v("Make migration as easy as possible. Migration will likely take way more time than the development itself. Also, migration is only finished after cleanup is performed.")]),e._v(" "),r("li",[e._v("RPC framework can be a place to add infrastructure-wide reliability improvements, e.g. mandatory deadlines, overload protection, etc. Common reliability issues can be identified by aggregating incident reports on a quarterly basis.")])])])])],1)}),[],!1,null,null,null);t.default=a.exports}}]);