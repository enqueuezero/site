(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{502:function(t,s,e){"use strict";e.r(s);var a=e(54),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"hashing-apscheduler-jobs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hashing-apscheduler-jobs"}},[t._v("#")]),t._v(" Hashing APScheduler Jobs")]),t._v(" "),e("p",[t._v("APScheduler is designed to run all jobs on one single machine. It becomes a problem if it overwhelms the host machine. In such a scenario, we will need to distribute APScheduler jobs to different machines. Our goal is to load a portion of jobs on a single machine, and eventually load all of the jobs on all machines. In this article, we'll introduce a technique by hashing jobs to a cluster of machines.")]),t._v(" "),e("p",[t._v("Say, we want to distribute 100 jobs on 4 machines. And, we specify 4 slots, each of which runs about 25 jobs.")]),t._v(" "),e("p",[e("img",{attrs:{src:"/static/images/apscheduler-hashing.svg",alt:"How hashing works"}})]),t._v(" "),e("p",[t._v("We need to know which jobs are going to be loaded on what machine.\nYou may set it in your own configurations.\nHere, we choose to set via environment variables.")]),t._v(" "),e("ul",[e("li",[t._v("For machine 1, "),e("code",[t._v("export APSCHEDULER_ASSIGNED_SLOTS=0; export APSCHEDULER_TOTAL_SLOTS=4;")]),t._v(".")]),t._v(" "),e("li",[t._v("For machine 2, "),e("code",[t._v("export APSCHEDULER_ASSIGNED_SLOTS=1; export APSCHEDULER_TOTAL_SLOTS=4;")]),t._v(".")]),t._v(" "),e("li",[t._v("For machine 3, "),e("code",[t._v("export APSCHEDULER_ASSIGNED_SLOTS=2; export APSCHEDULER_TOTAL_SLOTS=4;")]),t._v(".")]),t._v(" "),e("li",[t._v("For machine 4, "),e("code",[t._v("export APSCHEDULER_ASSIGNED_SLOTS=3; export APSCHEDULER_TOTAL_SLOTS=4;")]),t._v(".")])]),t._v(" "),e("p",[t._v("To achieve our goal, "),e("code",[t._v("scheduler.add_job()")]),t._v(" is only called when the slot of each job is assigned to the current host machine. See the below example.")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" os\n\nscheduler "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" BackgroundScheduler"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\njobs "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# define all of your jobs here")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The slots are assigned to the current machine.")]),t._v("\nassigned_slots "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" s "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" os"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("environ"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"APSCHEDULER_ASSIGNED_SLOTS"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("split"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('","')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# How many slots in total.")]),t._v("\ntotal_slots "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("os"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("environ"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("APSCHEDULER_TOTAL_SLOTS"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Only load jobs whose slots are assigned to the current machine")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" job "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" jobs"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("hash")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("job"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" total_slots"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" assigned_slots"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        scheduler"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add_job"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("job"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("As long as the versions of Python on all machines are the same, "),e("code",[t._v('hash(job["id"]) % total_slots')]),t._v(" derives to a same slot number. It guarantees all machines have a consensus of whether a job belongs to a particular slot, e.g., being loaded on a particular machine.")]),t._v(" "),e("p",[t._v("To get a more evenly distributed load, the "),e("code",[t._v("APSCHEDULER_ASSIGNED_SLOTS")]),t._v(" can be a list of numbers. Say, we set "),e("code",[t._v("APSCHEDULER_TOTAL_SLOTS=16")]),t._v(", and")]),t._v(" "),e("ul",[e("li",[t._v("For machine 1, "),e("code",[t._v("export APSCHEDULER_ASSIGNED_SLOTS=0,1,2,3")])]),t._v(" "),e("li",[t._v("For machine 2, "),e("code",[t._v("export APSCHEDULER_ASSIGNED_SLOTS=4,5,6,7")])]),t._v(" "),e("li",[t._v("For machine 3, "),e("code",[t._v("export APSCHEDULER_ASSIGNED_SLOTS=8,9,10,11")])]),t._v(" "),e("li",[t._v("For machine 4, "),e("code",[t._v("export APSCHEDULER_ASSIGNED_SLOTS=12,13,14,15")])])]),t._v(" "),e("p",[t._v("If one of the machine can serve more jobs, it's okay to assign more slots to it. For example,")]),t._v(" "),e("ul",[e("li",[t._v("For machine 1, "),e("code",[t._v("export APSCHEDULER_ASSIGNED_SLOTS=0,1,2,3,4,5,6")])]),t._v(" "),e("li",[t._v("For machine 2, "),e("code",[t._v("export APSCHEDULER_ASSIGNED_SLOTS=7,8,9")])]),t._v(" "),e("li",[t._v("For machine 3, "),e("code",[t._v("export APSCHEDULER_ASSIGNED_SLOTS=10,11,12")])]),t._v(" "),e("li",[t._v("For machine 4, "),e("code",[t._v("export APSCHEDULER_ASSIGNED_SLOTS=13,14,15")])])]),t._v(" "),e("p",[t._v("If it's acceptable to run a job twice, we can even assign duplicated slots to two machines. Hooray, we have high availability for the APScheduler cluster. For example, say, we set "),e("code",[t._v("APSCHEDULER_TOTAL_SLOTS=16")]),t._v(", and")]),t._v(" "),e("ul",[e("li",[t._v("For machine 1, "),e("code",[t._v("export APSCHEDULER_ASSIGNED_SLOTS=0,1,2,3")])]),t._v(" "),e("li",[t._v("For machine 2, "),e("code",[t._v("export APSCHEDULER_ASSIGNED_SLOTS=4,5,6,7")])]),t._v(" "),e("li",[t._v("For machine 3, "),e("code",[t._v("export APSCHEDULER_ASSIGNED_SLOTS=0,1,2,3")])]),t._v(" "),e("li",[t._v("For machine 4, "),e("code",[t._v("export APSCHEDULER_ASSIGNED_SLOTS=4,5,6,7")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);