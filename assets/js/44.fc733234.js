(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{429:function(e,t,a){"use strict";a.r(t);var r=a(54),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"raft-and-stream-paradigm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raft-and-stream-paradigm"}},[e._v("#")]),e._v(" Raft and Stream Paradigm")]),e._v(" "),a("p",[e._v("The stream is a data structure that evaluates data when we need them. Below is a typical Python Stream.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("from functools import lru_cache\n\nclass Stream:\n\n    def __init__(self, head, restfn=None):\n        self.head = head\n        self.restfn = restfn\n\n    @property\n    def stopped(self):\n        return self.restfn is None\n\n    @property\n    @lru_cache()\n    def rest(self):\n        assert not self.stopped, 'No rest for stopped stream.'\n        return self.restfn()\n")])])]),a("p",[e._v("Considering the usage, it often leads to a recursive definition. For example, a stream that keeps returning number "),a("code",[e._v("1")]),e._v(" has below form:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("def one_stream():\n    return Stream(1, one_stream)\n")])])]),a("p",[e._v("We can get "),a("code",[e._v("head")]),e._v(" for the evaluated value, and "),a("code",[e._v("rest")]),e._v(" for the rest of the stream.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(">>> one_s = one_stream()\n>>> print(one_s.head)\n1\n>> print(one_s.rest.head)\n1\n>>> print(one_s.rest.rest.head)\n1\n")])])]),a("p",[e._v("You might notice that "),a("code",[e._v("one_stream")]),e._v(" creates an infinite stream, meaning the stream never stops generating "),a("code",[e._v("1")]),e._v(". We can indicate a stopped stream by setting "),a("code",[e._v("restfn")]),e._v(" to "),a("code",[e._v("None")]),e._v(". Below example shows a stopwatch stream that eventually stopped after a given period.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("from time import time\n\ndef stopwatch_stream(period, start=None):\n    now = time()\n    start = start or now\n    left = max(0, period - (now - start))\n    rest = lambda: stopwatch_stream(period, start)\n    return Stream(left, rest if left > 0 else None)\n\n>>> stopwatch_s = stopwatch_stream(10)\n>>> stopwatch_s.head\n10.0\n>>> stopwatch_s.rest.head\n5.976487159729004\n>>> stopwatch_s.rest.rest.head\n1.7044363021850586\n>>> stopwatch_s.rest.rest.rest.head\n0\n>>> stopwatch_s.rest.rest.rest.stopped\nTrue\n")])])]),a("p",[e._v("The stream approach takes a different way of combining modules from Object-Oriented programming. We need to think of the history of time series for a module, rather than the states at any specific moment. Although we still handle states one by one, we don't care when the state change happens. The "),a("code",[e._v("stopwatch_stream")]),e._v(" allows the caller only caring the "),a("code",[e._v("left")]),e._v(" time for the period.")]),e._v(" "),a("p",[e._v("We build a datagram_stream on top of the "),a("code",[e._v("stopwatch_stream")]),e._v(" below. It creates a stream that either is stopped or has received a datagram.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import json\n\ndef receive(udp_server, timeout):\n    udp_server.settimeout(timeout)\n    try:\n        return udp_server.recvfrom(8192)\n    except socket.timeout:\n        return None\n\ndef datagram_stream(udp_server, timeout, left=None):\n    left = left or stopwatch_stream(timeout)\n    data = receive(udp_server, left.head) if not left.stopped else None\n    rest = lambda: datagram_stream(udp_server, second, left.rest)\n    return Stream(data, rest if data else None)\n")])])]),a("p",[e._v("Given a raft follower stream, it only cares the datagram stream and either turn it into a new follower stream if received any datagram or converts to a new candidate stream.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("def follower_stream(state):\n    datagrams = datagram_stream(timeout=state.election_interval)\n    timeout = datagrams.stopped\n    state = reduce_stream(handle_datagram, datagrams, init=state)\n    rest = lambda: candidate_stream(state) if timeout else follower_stream(state)\n    return Stream(state, rest)\n")])])]),a("p",[e._v("The "),a("code",[e._v("reduce_stream")]),e._v(" can be very similar to the "),a("code",[e._v("reduce")]),e._v(" function in functional programming. The "),a("code",[e._v("handle_datagram")]),e._v(" transform an old "),a("code",[e._v("state")]),e._v(" into a new "),a("code",[e._v("state")]),e._v(" based on the received datagram. The "),a("code",[e._v("candidate_stream")]),e._v(" creates a new stream that performs candidate behaviors.")]),e._v(" "),a("p",[e._v("Similarly, we can implement the candidate stream and leader stream in such way.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("def candidate_stream(state):\n    state = elect_self(state)\n    datagrams = datagram_stream(timeout=state.election_interval)\n    timeout = datagrams.stopped\n    state = reduce_stream(handle_datagram, datagrams, init=state)\n    def rest():\n        if timeout: return candidate_stream(state)\n        elif state.is_follower: return follower_stream(state)\n        else: return leader_stream(state)\n    return Stream(state, rest)\n\ndef leader_stream(state):\n    state = send_heartbeat(state)\n    datagram_stream = datagram_stream(timeout=state.heartbeat_interval)\n    state = reduce_stream(handle_datagram, datagrams, init=state)\n    rest = lambda: follower_stream(state) if state.is_follower else leader_stream(state)\n    return Stream(state, rest)\n")])])]),a("p",[e._v("The candidate requests to vote for itself and then waiting for votes before timeout. The leader sends heartbeats to all other nodes and then waiting for the response before timeout.")]),e._v(" "),a("p",[e._v("By applying the Stream paradigm, we now only need to focus on implementing "),a("code",[e._v("def handle_datagram(state, datagram) -> state")]),e._v(", which is purely functional and testable. I'll leave the implementation of it for you as a practice. ðŸ˜ƒ Enjoy hacking!")])])}),[],!1,null,null,null);t.default=s.exports}}]);